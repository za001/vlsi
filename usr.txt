
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity usr is
    Port ( clk : in  STD_LOGIC;
           rst : in  STD_LOGIC;
           mode : in  STD_LOGIC_VECTOR (1 downto 0);
           sin : in  STD_LOGIC;
           pin : in  STD_LOGIC_VECTOR (3 downto 0);
           sout : out  STD_LOGIC;
           pout : out  STD_LOGIC_VECTOR (3 downto 0));
end usr;

architecture Behavioral of usr is
signal temp:std_logic_vector(3 downto 0):="0000";
begin

process(clk,rst)

begin
if rst='1' then
sout<='0';
pout<="0000";
elsif rising_edge(clk) then
case mode is
when "00" =>
for i in  3 downto 0 loop
temp(i)<=sin;
sout<= temp(i);
end loop;

when "01" =>
for i in  3 downto 0 loop
temp(i)<=sin;
pout<= temp;
end loop;

when "10" =>
for i in  3 downto 0 loop
temp(i)<=pin(i);
sout<= temp(i);
end loop;

when others =>
pout<=pin;

end case;
end if;
end process;
end Behavioral;

///////////tb//////////////

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY usr_tb IS
END usr_tb;
 
ARCHITECTURE behavior OF usr_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT usr
    PORT(
         clk : IN  std_logic;
         rst : IN  std_logic;
         mode : IN  std_logic_vector(1 downto 0);
         sin : IN  std_logic;
         pin : IN  std_logic_vector(3 downto 0);
         sout : OUT  std_logic;
         pout : OUT  std_logic_vector(3 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal rst : std_logic := '0';
   signal mode : std_logic_vector(1 downto 0) := (others => '0');
   signal sin : std_logic := '0';
   signal pin : std_logic_vector(3 downto 0) := (others => '0');

 	--Outputs
   signal sout : std_logic;
   signal pout : std_logic_vector(3 downto 0);

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: usr PORT MAP (
          clk => clk,
          rst => rst,
          mode => mode,
          sin => sin,
          pin => pin,
          sout => sout,
          pout => pout
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 
 rst_process :process
   begin
		rst<='1';
		wait for 10 ns;
		rst<='0';
		wait for 10 ns;
   end process;
 

   -- Stimulus process
   stim_proc_mode: process
   begin		
      mode<="00";
      wait for 20 ns;
		mode<="01";
      wait for 20 ns;
		mode<="10";
      wait for 20 ns;
		mode<="11";
      wait for 20 ns;
   end process;
stim_proc_sin: process
   begin	
wait for 20 ns;	
      sin<=not(sin);
      wait for 20 ns;
   end process;
stim_proc_pin: process
   begin		
      pin<="1001";
      wait ;
   end process;

END;


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity binaryadder is
    Port ( A : in  STD_LOGIC_VECTOR (3 downto 0);
           B : in  STD_LOGIC_VECTOR (3 downto 0);
           Cin : in  STD_LOGIC;
           S: out  STD_LOGIC_VECTOR (3 downto 0);
           Carryout: out  STD_LOGIC);
end binaryadder;

architecture Behavioral of binaryadder is
--declare signals
signal temp1,temp2,temp3:std_logic;
--write components
component fa is
port(
		a,b,c:in std_logic;
		co:out std_logic;
		s:out std_logic
		);
end component;
begin
fa0:fa port map (a=>a(0),b=>b(0),c=>Cin,co=>temp1,s=>s(0));
fa1:fa port map (a=>a(1),b=>b(1),c=>temp1,co=>temp2,s=>s(1));
fa2:fa port map (a=>a(2),b=>b(2),c=>temp2,co=>temp3,s=>s(2));
fa3:fa port map (a=>a(3),b=>b(3),c=>temp3,co=>Carryout,s=>s(3));

end Behavioral;


-------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity fa is
port(
		a,b,c:in std_logic;
		co:out std_logic;
		s:out std_logic
		);
end fa;
architecture fa_arch of fa is
begin
s<=a xor b xor c;
co<=(a and b) or (c and (A or B));--(a and b)or(a and c)or(b and c);
end fa_arch;


///////////////////tb///////////////////

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
 
ENTITY binaryadder_tb IS
END binaryadder_tb;
 
ARCHITECTURE behavior OF binaryadder_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT binaryadder
    PORT(
         A : IN  std_logic_vector(3 downto 0);
         B : IN  std_logic_vector(3 downto 0);
         Cin : IN  std_logic;
         S : OUT  std_logic_vector(3 downto 0);
         Carryout : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal A : std_logic_vector(3 downto 0) := (others => '0');
   signal B : std_logic_vector(3 downto 0) := (others => '0');
   signal Cin : std_logic := '0';

 	--Outputs
   signal S : std_logic_vector(3 downto 0);
   signal Carryout : std_logic;
   
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: binaryadder PORT MAP (
          A => A,
          B => B,
          Cin => Cin,
          S => S,
          Carryout => Carryout
        );
 

   -- Stimulus process
   stim_proc_A: process
   begin		
	A<="0100";
  wait for 100 ns;	
  A<="0111";
  wait for 100 ns;
   end process;
	
	
stim_proc_B: process
   begin		
	B<="1111";
  wait for 100 ns;
  B<="0011";
wait for 100 ns;
   end process;
	
	
	stim_proc_Cin: process
   begin		
	Cin<='0';
  wait for 100 ns;	


      wait;
   end process;


END;
